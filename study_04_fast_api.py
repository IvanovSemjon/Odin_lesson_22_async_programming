# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
import random   # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
import sys      # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
import os       # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
from fastapi import FastAPI  # –í–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API
from fastapi.responses import HTMLResponse  # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ HTML-–æ—Ç–≤–µ—Ç–æ–≤
import uvicorn  # ASGI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ FastAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ Windows
if sys.platform == 'win32':
    os.system('chcp 65001 >nul')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É UTF-8
    sys.stdout.reconfigure(encoding='utf-8')  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ UTF-8
    sys.stderr.reconfigure(encoding='utf-8')  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –≤ UTF-8

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(title="üèÅ –ì–æ–Ω–∫–∏ –º–∞—à–∏–Ω üèÅ")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ - —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
race_data = {
    "cars": ["–ú–∞—à–∏–Ω–∞ ‚Ññ 1", "–ú–∞—à–∏–Ω–∞ ‚Ññ 2", "–ú–∞—à–∏–Ω–∞ ‚Ññ 3"],  # –ù–∞–∑–≤–∞–Ω–∏—è –º–∞—à–∏–Ω
    "positions": [0, 0, 0],  # –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
    "distance": 10,          # –î–∏—Å—Ç–∞–Ω—Ü–∏—è –≥–æ–Ω–∫–∏
    "racing": False,         # –§–ª–∞–≥ - –∏–¥–µ—Ç –ª–∏ –≥–æ–Ω–∫–∞ —Å–µ–π—á–∞—Å
    "winner": None           # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≥–æ–Ω–∫–∏
}


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML —Ñ–∞–π–ª
@app.get("/", response_class=HTMLResponse)
def home():
    """–û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –≥–æ–Ω–∫–∏"""
    return open("index.html", "r", encoding="utf-8").read()


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –æ–¥–Ω–æ–π –º–∞—à–∏–Ω—ã
async def car_race(car_index):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º"""
    global race_data
    
    # –ú–∞—à–∏–Ω–∞ –¥–≤–∏–∂–µ—Ç—Å—è –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —Ñ–∏–Ω–∏—à–∞ –∏ –≥–æ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    while race_data["positions"][car_index] < race_data["distance"] and race_data["racing"]:
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞—à–∏–Ω
        await asyncio.sleep(random.uniform(0.5, 1.5))
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –º–∞—à–∏–Ω—ã –Ω–∞ 1
        race_data["positions"][car_index] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏ –º–∞—à–∏–Ω–∞ —Ñ–∏–Ω–∏—à–∞
        if race_data["positions"][car_index] >= race_data["distance"]:
            # –ï—Å–ª–∏ –µ—â–µ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –æ–±—ä—è–≤–ª—è–µ–º —ç—Ç—É –º–∞—à–∏–Ω—É –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
            if race_data["winner"] is None:
                race_data["winner"] = race_data["cars"][car_index]
                race_data["racing"] = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–Ω–∫—É


# API endpoint –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏
@app.get("/start")
async def start_race():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é –≥–æ–Ω–∫—É"""
    global race_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –≥–æ–Ω–∫–∞
    if race_data["racing"]:
        return {"message": "–ì–æ–Ω–∫–∞ —É–∂–µ –∏–¥–µ—Ç!"}
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    race_data["positions"] = [0, 0, 0]  # –í—Å–µ –º–∞—à–∏–Ω—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    race_data["racing"] = True           # –ì–æ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    race_data["winner"] = None           # –ü–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç

    # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
    # –ö–∞–∂–¥–∞—è –º–∞—à–∏–Ω–∞ –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –≤ —Å–≤–æ–µ–π –∫–æ—Ä—É—Ç–∏–Ω–µ
    tasks = [asyncio.create_task(car_race(i)) for i in range(3)]

    return {"message": "–ì–æ–Ω–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!"}


# API endpoint –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–Ω–∫–∏
@app.get("/reset")
async def reset_race():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º"""
    global race_data
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    race_data["positions"] = [0, 0, 0]  # –í—Å–µ –º–∞—à–∏–Ω—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    race_data["racing"] = False          # –ì–æ–Ω–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
    race_data["winner"] = None           # –ü–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç
    
    return {"message": "–ì–æ—Ç–æ–≤ –∫ –≥–æ–Ω–∫–∞–º!"}


# API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–Ω–∫–∏
@app.get("/status")
def get_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    return {
        "cars": race_data["cars"],           # –ù–∞–∑–≤–∞–Ω–∏—è –º–∞—à–∏–Ω
        "positions": race_data["positions"], # –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        "distance": race_data["distance"],   # –î–∏—Å—Ç–∞–Ω—Ü–∏—è –≥–æ–Ω–∫–∏
        "racing": race_data["racing"],       # –°—Ç–∞—Ç—É—Å –≥–æ–Ω–∫–∏
        "winner": race_data["winner"]        # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    }



# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º ASGI —Å–µ—Ä–≤–µ—Ä uvicorn —Å –Ω–∞—à–∏–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    # host="127.0.0.1" - –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
    # port=8000 - –ø–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    uvicorn.run(app, host="127.0.0.1", port=8000)


